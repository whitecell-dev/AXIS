[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "axis-py"
version = "1.0.0"
description = "React for Deterministic Reasoning - Unix pipes for structured data with cryptographic verification"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AXIS Team", email = "team@axis.dev"}
]
maintainers = [
    {name = "AXIS Team", email = "team@axis.dev"}
]
keywords = [
    "terminal", "pipes", "json", "yaml", "functional-programming", 
    "lambda-calculus", "deterministic", "hash-verification", 
    "unix-tools", "structured-data", "business-logic", "security",
    "rfc8785", "canonicalization", "pure-functions"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators", 
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
    "Topic :: Security",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
]
requires-python = ">=3.8"
dependencies = [
    # CALYX-PY Philosophy: Zero core dependencies - pure Python stdlib only
    # This ensures maximum portability and minimal attack surface
]

[project.optional-dependencies]
yaml = [
    "pyyaml>=6.0"
]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
    "pyyaml>=6.0",
]
security = [
    # Security testing dependencies
    "pytest-security>=0.1.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
all = [
    "pyyaml>=6.0",
    "pytest>=7.0", 
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
    "black>=23.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/axis"
Documentation = "https://axis-docs.example.com"
Repository = "https://github.com/your-org/axis.git"
"Bug Reports" = "https://github.com/your-org/axis/issues"
Changelog = "https://github.com/your-org/axis/blob/main/CHANGELOG.md"
Security = "https://github.com/your-org/axis/security"

[project.scripts]
axis-pipes = "axis_pipes:cli"
axis-rules = "axis_rules:cli"  
axis-adapters = "axis_adapters:cli"

[tool.setuptools]
py-modules = ["axis_pipes", "axis_rules", "axis_adapters"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md"]

# ============================================================================
# Development Tools Configuration
# ============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers", 
    "--strict-config",
    "--cov=axis_pipes",
    "--cov=axis_rules", 
    "--cov=axis_adapters",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "security: Security tests",
    "golden: Golden master tests",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["yaml", "yaml.*"]
ignore_missing_imports = true

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "S",   # flake8-bandit (security)
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S603",  # subprocess call - we control this explicitly
    "S607",  # partial executable path - allowlist controlled
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "S603", "S607"]  # Allow assert statements and subprocess in tests

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B603", "B607"]  # Allow subprocess in controlled context

[tool.coverage.run]
source = ["axis_pipes", "axis_rules", "axis_adapters"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/.env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# ============================================================================
# AXIS-Specific Configuration (CALYX-PY Philosophy)
# ============================================================================

[tool.axis]
# Configuration for AXIS tools following CALYX-PY philosophy
version = "1.0.0"
philosophy = "CALYX-PY: Every line of code is a liability until proven otherwise"

[tool.axis.limits]
# Enforce CALYX-PY philosophy constraints
max_loc_per_file = 200         # Keep components readable in one sitting
max_total_loc = 600            # Total system should be <600 LOC
max_functions_per_file = 15    # Limit cognitive complexity
max_complexity = 8             # Keep functions simple
max_dependencies = 0           # Core has zero dependencies
max_condition_length = 4096    # Security limit for rule conditions
max_ast_depth = 32             # Prevent AST bomb attacks

[tool.axis.components]
pipes = "axis_pipes.py"
rules = "axis_rules.py" 
adapters = "axis_adapters.py"

[tool.axis.security]
# Security configuration
command_allowlist = [
    "echo", "cat", "date", "wc", "head", "tail", "sort", "uniq",
    "sqlite3", "psql", "mysql", "curl", "wget", "mail", "sendmail",
    "jq", "grep", "sed", "awk", "tr", "cut", "base64"
]
default_timeout = 30
max_memory_mb = 256
max_file_size_mb = 100
max_processes = 100

[tool.axis.hash_verification]
# Enable hash verification in development
enabled = true
algorithm = "sha3-256"
canonical_json = true
rfc8785_compliant = true

[tool.axis.determinism]
# Determinism guarantees
time_injection_required = true  # Time must be injected via adapters
side_effects_isolated = true    # Only adapters can have side effects
pure_functions_only = true      # PIPES and RULES must be pure
single_pass_semantics = true    # Rules evaluate against frozen context
